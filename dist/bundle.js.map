{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC9BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNmC;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAO;AAChC;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA,CAAC;;AAED;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,yFAAyF,8CAA8C;AACvI;AACA;AACA,UAAU;AACV,oBAAoB,8CAA8C;AAClE;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH,C","sources":["webpack:///./chatgpt.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./background.js"],"sourcesContent":["class ChatGPT {\n    async getChatResponse(promptInput, apiKey, promptLength, temperature, maxTokens) {\n        // API endpoint for getting chat response\n        const endpoint = 'https://api.openai.com/v1/chat/completions';\n        // Construct request data\n        const data = {\n          model: \"gpt-3.5-turbo\",\n          messages: [{\"role\": \"user\", \"content\": promptInput}]\n        };\n    \n        // Send POST request to API endpoint\n        const response = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer '+apiKey\n          },\n          body: JSON.stringify(data)\n        });\n    \n        // Parse response as JSON\n        const responseData = await response.json();\n        \n        // Extract and return chat response\n        const chatResponse = responseData.choices[0].message.content;\n        //console.log(chatResponse);\n        // Send chat response back to content script\n        return chatResponse;\n      }\n}\nmodule.exports = ChatGPT;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ChatGPT from './chatgpt.js';\n\n// Define a variable to store the settings\nlet settings = null;\n\n// Add a listener for the 'getChatGPT' message\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.type === 'getChatGPT') {\n    getSettings()\n      .then(settings => {\n        const chat = new ChatGPT();\n        return chat.getChatResponse(request.prompt, settings.apiKey, settings.promptLength, settings.temperature, settings.maxTokens);\n      })\n      .then(response => {\n        sendMessageToPopup(response);\n        saveChatToStorage(request.prompt, response);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    return true;\n  } else if (request.type === 'resetSettings') {\n    resetSettings(request.settings);\n    return true;\n  }\n});\n\nfunction sendMessageToPopup(data) {\n  chrome.runtime.sendMessage({ type: 'response', data });\n}\n// Define a function to get settings\nfunction getSettings() {\n  if (settings) {\n    resolve(settings);\n  } else {\n    return new Promise((resolve, reject) => {\n      chrome.storage.sync.get(['apiKey', 'promptLength', 'temperature', 'maxTokens'], ({ apiKey, promptLength, temperature, maxTokens }) => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve({ apiKey, promptLength, temperature, maxTokens });\n        }\n      });\n    });\n  }\n}\n\n// Define a function to reset settings\nfunction resetSettings(settings) {\n  // Code to reset settings goes here\n}\n\n// Define a function to save the prompt and response to chrome.storage\nfunction saveChatToStorage(prompt, response) {\n  chrome.storage.sync.set({ prompt, response }, () => {\n    if (chrome.runtime.lastError) {\n      console.error(chrome.runtime.lastError);\n    } else {\n      console.log('Chat saved to storage');\n    }\n  });\n}"],"names":[],"sourceRoot":""}